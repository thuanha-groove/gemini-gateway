from typing import List, Optional
from pydantic import BaseModel, Field


class ConfigUpdate(BaseModel):
    API_KEYS: Optional[List[str]] = Field(None, description="List of Gemini API keys")
    ALLOWED_TOKENS: Optional[List[str]] = Field(None, description="List of tokens allowed to access the API")
    AUTH_TOKEN: Optional[str] = Field(None, description="Token for API authentication")
    BASE_URL: Optional[str] = Field(None, description="Base URL for the Gemini API")
    VERTEX_API_KEYS: Optional[List[str]] = Field(None, description="List of Vertex AI platform API keys")
    VERTEX_EXPRESS_BASE_URL: Optional[str] = Field(None, description="Base URL for the Vertex Express API")
    URL_NORMALIZATION_ENABLED: Optional[bool] = Field(None, description="Enable Smart Routing")
    MAX_FAILURES: Optional[int] = Field(None, ge=1, le=100, description="Number of times an API key is marked as invalid after failure")
    TIME_OUT: Optional[int] = Field(None, ge=1, le=600, description="Timeout for API requests")
    MAX_RETRIES: Optional[int] = Field(None, ge=0, le=10, description="Maximum number of retries after an API request fails")
    PROXIES: Optional[List[str]] = Field(None, description="List of proxy servers")
    PROXIES_USE_CONSISTENCY_HASH_BY_API_KEY: Optional[bool] = Field(None, description="Enable Consistent Proxy Strategy")
    TEST_MODEL: Optional[str] = Field(None, description="Model used for testing API keys")
    IMAGE_MODELS: Optional[List[str]] = Field(None, description="List of models that support image processing")
    SEARCH_MODELS: Optional[List[str]] = Field(None, description="List of models that support search functionality")
    FILTERED_MODELS: Optional[List[str]] = Field(None, description="List of models to filter")
    TOOLS_CODE_EXECUTION_ENABLED: Optional[bool] = Field(None, description="Enable Code Execution Tool")
    SHOW_SEARCH_LINK: Optional[bool] = Field(None, description="Show Search Link")
    SHOW_THINKING_PROCESS: Optional[bool] = Field(None, description="Show Thinking Process")
    THINKING_MODELS: Optional[List[str]] = Field(None, description="List of models for the 'thinking process'")
    THINKING_BUDGET_MAP: Optional[dict] = Field(None, description="Set a budget for each thinking model")
    SAFETY_SETTINGS: Optional[List[dict]] = Field(None, description="Configure the model's safety filtering level")
    TTS_MODEL: Optional[str] = Field(None, description="Model for TTS")
    TTS_VOICE_NAME: Optional[str] = Field(None, description="TTS voice name")
    TTS_SPEED: Optional[str] = Field(None, description="Select TTS speed")
    PAID_KEY: Optional[str] = Field(None, description="Paid API key for image generation")
    CREATE_IMAGE_MODEL: Optional[str] = Field(None, description="Model for image generation")
    UPLOAD_PROVIDER: Optional[str] = Field(None, description="Image upload provider")
    SMMS_SECRET_TOKEN: Optional[str] = Field(None, description="Secret key for SM.MS image hosting")
    PICGO_API_KEY: Optional[str] = Field(None, description="API key for PicGo")
    CLOUDFLARE_IMGBED_URL: Optional[str] = Field(None, description="URL for Cloudflare image hosting")
    CLOUDFLARE_IMGBED_AUTH_CODE: Optional[str] = Field(None, description="Authentication code for Cloudflare image hosting")
    CLOUDFLARE_IMGBED_UPLOAD_FOLDER: Optional[str] = Field(None, description="Upload folder path for Cloudflare image hosting")
    STREAM_OPTIMIZER_ENABLED: Optional[bool] = Field(None, description="Enable Stream Output Optimization")
    STREAM_MIN_DELAY: Optional[float] = Field(None, ge=0, le=1, description="Minimum delay for stream output")
    STREAM_MAX_DELAY: Optional[float] = Field(None, ge=0, le=1, description="Maximum delay for stream output")
    STREAM_SHORT_TEXT_THRESHOLD: Optional[int] = Field(None, ge=1, le=100, description="Character threshold for short text")
    STREAM_LONG_TEXT_THRESHOLD: Optional[int] = Field(None, ge=1, le=1000, description="Character threshold for long text")
    STREAM_CHUNK_SIZE: Optional[int] = Field(None, ge=1, le=100, description="Chunk size for stream output")
    FAKE_STREAM_ENABLED: Optional[bool] = Field(None, description="Enable Fake Streaming")
    FAKE_STREAM_EMPTY_DATA_INTERVAL_SECONDS: Optional[int] = Field(None, ge=1, le=60, description="Fake Stream Empty Data Interval")
    CHECK_INTERVAL_HOURS: Optional[int] = Field(None, ge=1, description="Interval for periodically checking key status")
    TIMEZONE: Optional[str] = Field(None, description="Timezone for scheduled tasks")
    LOG_LEVEL: Optional[str] = Field(None, description="Set the application's log verbosity")
    AUTO_DELETE_ERROR_LOGS_ENABLED: Optional[bool] = Field(None, description="Enable Auto-delete Error Logs")
    AUTO_DELETE_ERROR_LOGS_DAYS: Optional[int] = Field(None, ge=1, description="Auto-delete error logs older than")
    AUTO_DELETE_REQUEST_LOGS_ENABLED: Optional[bool] = Field(None, description="Enable Auto-delete Request Logs")
    AUTO_DELETE_REQUEST_LOGS_DAYS: Optional[int] = Field(None, ge=1, description="Auto-delete request logs older than")
